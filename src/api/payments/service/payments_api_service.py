import logging
from http import HTTPStatus

from fastapi import HTTPException
from sqlalchemy.ext.asyncio import AsyncSession

from src.schemas.account_schemas import AccountCreateSchema
from src.services.account_service import AccountService
from src.config import config
from src.api.payments.payment_requests import PaymentCreateRequest
from src.schemas.payment_schemas import PaymentReadSchema, PaymentCreateSchema
from src.services.payment_service import PaymentService
from src.api.payments.service.signature_service import SignatureService

logger = logging.getLogger(__name__)


class PaymentApiService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π, –ø–æ–ª—É—á–∞–µ–º—ã—Ö —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫–∏.

    –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:
    - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∏
    - –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    - –°–æ–∑–¥–∞–Ω–∏–µ/–ø–æ–∏—Å–∫ —Å—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ
    """

    def __init__(self, session: AsyncSession):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π.

        :param session: –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy
        """
        self.session = session
        self.payment_service = PaymentService(session)
        self.account_service = AccountService(session)
        self.signature_service = SignatureService()

    async def create_payment(self, payment_request: PaymentCreateRequest) -> PaymentReadSchema:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–π webhook-–ø–ª–∞—Ç–µ–∂.

        –®–∞–≥–∏:
        1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
        2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ transaction_id
        3. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—á—ë—Ç–∞
        4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞

        :param payment_request: –æ–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
        :return: –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        """
        logger.info("üì© –ü–æ–ª—É—á–µ–Ω webhook-–ø–ª–∞—Ç–µ–∂: %s", payment_request)

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ö–µ–º—É –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        payment_data = PaymentCreateSchema.model_validate(payment_request)

        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
        expected_signature = self.signature_service.create_signature(
            payment_data, config.WEBHOOK_SECRET_KEY
        )
        if payment_request.signature != expected_signature:
            logger.warning("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å—å. –û–∂–∏–¥–∞–ª–æ—Å—å: %s, –ü–æ–ª—É—á–µ–Ω–æ: %s",
                           expected_signature, payment_request.signature)
            raise HTTPException(
                status_code=HTTPStatus.BAD_REQUEST,
                detail="–ü–æ–¥–ø–∏—Å—å –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞"
            )

        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        existing_payment = await self.payment_service.get_by_transaction_id(payment_data.transaction_id)
        if existing_payment:
            logger.warning("‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ —Å transaction_id=%s —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", payment_data.transaction_id)
            raise HTTPException(
                status_code=HTTPStatus.CONFLICT,
                detail="–î–∞–Ω–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å —Ä–∞–Ω–µ–µ"
            )

        # 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—á—ë—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        account = await self.account_service.get_by_account_user_pair(
            account_id=payment_data.account_id,
            user_id=payment_data.user_id
        )
        if not account:
            logger.info("üè¶ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—á—ë—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID=%s", payment_data.user_id)
            account = await self.account_service.create(AccountCreateSchema(
                balance=0.0,
                user_id=payment_data.user_id,
                id=payment_data.account_id,
            ))

        # 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Å—á—ë—Ç–∞
        logger.info("üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Å—á—ë—Ç–∞ ID=%s –Ω–∞ —Å—É–º–º—É %.2f", account.id, payment_data.amount)
        await self.account_service.update_balance(
            account_id=account.id,
            delta=payment_data.amount
        )

        # 5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
        new_payment = await self.payment_service.create(payment_data)
        logger.info("‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: transaction_id=%s", new_payment.transaction_id)

        return PaymentReadSchema.model_validate(new_payment)

    async def get_user_payments(self, user_id: int) -> list[PaymentReadSchema]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :return: —Å–ø–∏—Å–æ–∫ –ø–ª–∞—Ç–µ–∂–µ–π
        """
        logger.info("üìú –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID=%s", user_id)
        payments = await self.payment_service.get_by_user_id(user_id)
        return [PaymentReadSchema.model_validate(p) for p in payments]
