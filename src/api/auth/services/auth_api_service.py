import logging
from fastapi import HTTPException, status
from sqlalchemy.ext.asyncio import AsyncSession

from src.schemas.auth_schemas import UserAuthSchema
from src.schemas.user_shemas import UserReadSchema, UserCreateSchema
from src.services.user_service import UserService
from src.api.auth.request import AuthLoginRequest
from src.utils.security import verify_password, hash_password
from src.enums.user_role import UserRole

logger = logging.getLogger(__name__)


class AuthAPIService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    –°–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥–∏–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ UserService.
    """

    def __init__(self, session: AsyncSession):
        """
        :param session: –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy
        """
        self.user_service = UserService(session=session)

    async def authenticate(self, email: str, password: str) -> UserAuthSchema:
        """
        –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email –∏ –ø–∞—Ä–æ–ª—é.

        :param email: Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param password: –ü–∞—Ä–æ–ª—å –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ
        :raises HTTPException: 404, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
                               401, –µ—Å–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π
        :return: UserAuthSchema
        """
        logger.info(f"üîç –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞: email={email}")

        user = await self.user_service.get_user_with_password(email=email)
        if not user:
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email={email} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email {email} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )

        if not verify_password(password, user.hashed_password):
            logger.warning(f"üîë –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è email={email}")
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å"
            )

        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: id={user.id}, email={email}")
        return user

    async def register_user(self, email: str, password: str, role: UserRole, full_name: str) -> UserReadSchema:
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        :param email: Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param password: –ü–∞—Ä–æ–ª—å
        :param role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (UserRole)
        :param full_name: –ü–æ–ª–Ω–æ–µ –∏–º—è
        :raises HTTPException: 400, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        :return: UserReadSchema
        """
        logger.info(f"üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: email={email}, role={role}")

        existing_user = await self.user_service.get_by_email(email=email)
        if existing_user:
            logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email={email} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email {email} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"
            )

        new_user = UserCreateSchema(
            email=email,
            hashed_password=hash_password(password),
            role=role,
            full_name=full_name,
        )
        created_user = await self.user_service.create(new_user)

        logger.info(f"üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: id={created_user.id}, email={email}")
        return created_user
